// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination mock_repository.go -package item
//

// Package item is a generated GoMock package.
package item

import (
	commons "inventory-service-go/commons"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemRepository) CreateItem(request CreateItemRequest) (ItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", request)
	ret0, _ := ret[0].(ItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemRepositoryMockRecorder) CreateItem(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemRepository)(nil).CreateItem), request)
}

// DeleteItem mocks base method.
func (m *MockItemRepository) DeleteItem(id uuid.UUID) (commons.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(commons.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemRepositoryMockRecorder) DeleteItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemRepository)(nil).DeleteItem), id)
}

// GetItem mocks base method.
func (m *MockItemRepository) GetItem(id uuid.UUID) (ItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", id)
	ret0, _ := ret[0].(ItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemRepositoryMockRecorder) GetItem(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemRepository)(nil).GetItem), id)
}

// GetItems mocks base method.
func (m *MockItemRepository) GetItems(pagination *commons.Pagination) ([]ItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", pagination)
	ret0, _ := ret[0].([]ItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemRepositoryMockRecorder) GetItems(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemRepository)(nil).GetItems), pagination)
}

// UpdateItem mocks base method.
func (m *MockItemRepository) UpdateItem(request UpdateItemRequest) (ItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", request)
	ret0, _ := ret[0].(ItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemRepositoryMockRecorder) UpdateItem(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemRepository)(nil).UpdateItem), request)
}
