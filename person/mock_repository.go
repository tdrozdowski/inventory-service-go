// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination mock_repository.go -package person
//

// Package person is a generated GoMock package.
package person

import (
	commons "inventory-service-go/commons"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonRepository) Create(request CreatePersonRequest) (PersonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(PersonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersonRepositoryMockRecorder) Create(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonRepository)(nil).Create), request)
}

// DeleteByUuid mocks base method.
func (m *MockPersonRepository) DeleteByUuid(uuid uuid.UUID) (commons.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUuid", uuid)
	ret0, _ := ret[0].(commons.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByUuid indicates an expected call of DeleteByUuid.
func (mr *MockPersonRepositoryMockRecorder) DeleteByUuid(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUuid", reflect.TypeOf((*MockPersonRepository)(nil).DeleteByUuid), uuid)
}

// GetAll mocks base method.
func (m *MockPersonRepository) GetAll(pagination *commons.Pagination) ([]PersonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pagination)
	ret0, _ := ret[0].([]PersonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPersonRepositoryMockRecorder) GetAll(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPersonRepository)(nil).GetAll), pagination)
}

// GetById mocks base method.
func (m *MockPersonRepository) GetById(id int) (PersonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(PersonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPersonRepositoryMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPersonRepository)(nil).GetById), id)
}

// GetByUuid mocks base method.
func (m *MockPersonRepository) GetByUuid(uuid uuid.UUID) (PersonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", uuid)
	ret0, _ := ret[0].(PersonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUuid indicates an expected call of GetByUuid.
func (mr *MockPersonRepositoryMockRecorder) GetByUuid(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockPersonRepository)(nil).GetByUuid), uuid)
}

// Update mocks base method.
func (m *MockPersonRepository) Update(request UpdatePersonRequest) (PersonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", request)
	ret0, _ := ret[0].(PersonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonRepositoryMockRecorder) Update(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonRepository)(nil).Update), request)
}
