// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination mock_repository.go -package invoice
//

// Package invoice is a generated GoMock package.
package invoice

import (
	commons "inventory-service-go/commons"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceRepository is a mock of InvoiceRepository interface.
type MockInvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceRepositoryMockRecorder
}

// MockInvoiceRepositoryMockRecorder is the mock recorder for MockInvoiceRepository.
type MockInvoiceRepositoryMockRecorder struct {
	mock *MockInvoiceRepository
}

// NewMockInvoiceRepository creates a new mock instance.
func NewMockInvoiceRepository(ctrl *gomock.Controller) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceRepository) EXPECT() *MockInvoiceRepositoryMockRecorder {
	return m.recorder
}

// AddItemsToInvoice mocks base method.
func (m *MockInvoiceRepository) AddItemsToInvoice(request ItemsToInvoiceRequest) (ItemsToInvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemsToInvoice", request)
	ret0, _ := ret[0].(ItemsToInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemsToInvoice indicates an expected call of AddItemsToInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) AddItemsToInvoice(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemsToInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).AddItemsToInvoice), request)
}

// CreateInvoice mocks base method.
func (m *MockInvoiceRepository) CreateInvoice(request CreateInvoiceRequest) (InvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", request)
	ret0, _ := ret[0].(InvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) CreateInvoice(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).CreateInvoice), request)
}

// DeleteInvoice mocks base method.
func (m *MockInvoiceRepository) DeleteInvoice(id uuid.UUID) (commons.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", id)
	ret0, _ := ret[0].(commons.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) DeleteInvoice(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).DeleteInvoice), id)
}

// GetAll mocks base method.
func (m *MockInvoiceRepository) GetAll(pagination *commons.Pagination) ([]InvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", pagination)
	ret0, _ := ret[0].([]InvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockInvoiceRepositoryMockRecorder) GetAll(pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockInvoiceRepository)(nil).GetAll), pagination)
}

// GetAllForUser mocks base method.
func (m *MockInvoiceRepository) GetAllForUser(userId uuid.UUID) ([]InvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", userId)
	ret0, _ := ret[0].([]InvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockInvoiceRepositoryMockRecorder) GetAllForUser(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockInvoiceRepository)(nil).GetAllForUser), userId)
}

// GetInvoice mocks base method.
func (m *MockInvoiceRepository) GetInvoice(id uuid.UUID) (InvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", id)
	ret0, _ := ret[0].(InvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) GetInvoice(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).GetInvoice), id)
}

// GetInvoiceWithItems mocks base method.
func (m *MockInvoiceRepository) GetInvoiceWithItems(id uuid.UUID) ([]InvoiceItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceWithItems", id)
	ret0, _ := ret[0].([]InvoiceItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceWithItems indicates an expected call of GetInvoiceWithItems.
func (mr *MockInvoiceRepositoryMockRecorder) GetInvoiceWithItems(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceWithItems", reflect.TypeOf((*MockInvoiceRepository)(nil).GetInvoiceWithItems), id)
}

// RemoveItemFromInvoice mocks base method.
func (m *MockInvoiceRepository) RemoveItemFromInvoice(request SimpleInvoiceItem) (ItemsToInvoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemFromInvoice", request)
	ret0, _ := ret[0].(ItemsToInvoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveItemFromInvoice indicates an expected call of RemoveItemFromInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) RemoveItemFromInvoice(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemFromInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).RemoveItemFromInvoice), request)
}

// UpdateInvoice mocks base method.
func (m *MockInvoiceRepository) UpdateInvoice(request UpdateInvoiceRequest) (InvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoice", request)
	ret0, _ := ret[0].(InvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoice indicates an expected call of UpdateInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) UpdateInvoice(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).UpdateInvoice), request)
}
